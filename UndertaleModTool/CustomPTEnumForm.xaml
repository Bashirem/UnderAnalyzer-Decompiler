<Window x:Class="UndertaleModTool.CSTMPTENUM"
        IsVisibleChanged="Window_IsVisibleChanged"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:UndertaleModTool"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        d:DataContext="{d:DesignInstance Type=local:Settings}"
        ResizeMode="NoResize"
        Title="Pizza Tower Enum Finder" Height="400" Width="700" MaxHeight="400" MaxWidth="700" SizeToContent="Height" WindowStartupLocation="CenterOwner"
        Style="{DynamicResource DefaultWindowStyle}">
    <ScrollViewer VerticalScrollBarVisibility="Auto">
        <StackPanel>
            <TextBlock Text="Pizza Tower Enum Finder" Margin="10,10,10,4" FontWeight="Bold"
                       ToolTip="Attempts to find Pizza Tower Enums in Switch Statements"/>

            <!-- Massive Explaination Text with even bigger Explaination ToolTip -->
            <TextBlock Grid.Row="14" Grid.Column="0" Grid.ColumnSpan="4" Margin="10" TextWrapping="Wrap" Text="Here you can pick where and how the Variable Definition Maker searches for Pizza Tower Enums. To learn about how to format your inputs correctly, hover over this text. Pressing the 'Save Inputs' button will create a new Pizza Tower JSON File while using your inputs to search for Enums. Pressing the 'Use Defaults' Button will do the same, but will check code that works for Vanilla Pizza Tower">
                <TextBlock.ToolTip>
                    <ToolTip>
                        <TextBlock>
                            To add a code snippet to search, press the 'Add Code to Search' button
                            <LineBreak/>
                            In the First Textbox, input the Code Name of where you wish to search for Enums
                            <LineBreak/>
                            In the Second Textbox, input the function prefix that the states use
                            <LineBreak/>
                            You can optionally add more than one function prefix to check for by seperating them with commas
                            <LineBreak/>
                            In the Third Textbox, input the variable name that the switch statment uses
                            <LineBreak/>
                            <LineBreak/>
                            Code Example:
                            <LineBreak/>
                            switch (state) {
                            <LineBreak/>
                            case 0:
                            <LineBreak/>
                            scr_player_normal();
                            <LineBreak/>
                            break;
                            <LineBreak/>
                            case UnknownEnum.Value_1:
                            <LineBreak/>
                            state_player_idle();
                            <LineBreak/>
                            break;
                            <LineBreak/>
                            }
                            <LineBreak/>
                            <LineBreak/>
                            Example Usage: gml_Script_scr_states   |   scr_player_, state_player_    |   state
                            <LineBreak/>
                            Outcome: states.normal  |   states.idle
                        </TextBlock>
                    </ToolTip>
                </TextBlock.ToolTip>
            </TextBlock>

            <!-- StackPanel to hold dynamic rows -->
            <StackPanel x:Name="VariableRowsPanel" Margin="10,0,10,3">
                <Grid Margin="10,0,10,10">
                    <Grid.ColumnDefinitions>
                        <!-- First column for Variable label and TextBox -->
                        <ColumnDefinition Width="Auto"/>
                        <!-- Second column for Asset Type label and ComboBox -->
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <TextBlock Grid.Row="1" Grid.Column="0" Margin="28,0,505,0" Text="Code to Search:" VerticalAlignment="Center" Grid.ColumnSpan="2">
                        <TextBlock.ToolTip>
                            <ToolTip>
                                <TextBlock>
                                    The name of the code entry of where you wish to search for enums.
                                    <LineBreak/>
                                    <LineBreak/>
                                    Example: gml_Script_scr_states
                                </TextBlock>
                            </ToolTip>
                        </TextBlock.ToolTip>
                    </TextBlock>

                    <TextBlock Grid.Column="1" Margin="222,0,296,0" Text="State Function Prefix:" VerticalAlignment="Center" Grid.Row="1">
                        <TextBlock.ToolTip>
                            <ToolTip>
                                <TextBlock>
                                The function prefix that the states use
                                <LineBreak/>
                                You can optionally add many state functions to check for by seperating them with commas
                                <LineBreak/>
                                <LineBreak/>
                                Example: scr_player_, state_player_
                                <LineBreak/>
                                Code Example:
                                <LineBreak/>
                                switch (state) {
                                <LineBreak/>
                                case 0:
                                <LineBreak/>
                                scr_player_normal();
                                <LineBreak/>
                                break;
                                <LineBreak/>
                                case UnknownEnum.Value_1:
                                <LineBreak/>
                                state_player_idle();
                                <LineBreak/>
                                break;
                                <LineBreak/>
                                }
                                <LineBreak/>
                                <LineBreak/>
                                Outcome: states.normal  |   states.idle
                                </TextBlock>
                            </ToolTip>
                        </TextBlock.ToolTip>
                    </TextBlock>

                    <TextBlock Grid.Column="1" Margin="421,0,0,0" Text="Switch Statement Var Name:" VerticalAlignment="Center" HorizontalAlignment="Left" Grid.Row="1">
                        <TextBlock.ToolTip>
                            <ToolTip>
                                <TextBlock>
                                    The variable name that the switch statment uses
                                    <LineBreak/>
                                    <LineBreak/>
                                    Example: state
                                    <LineBreak/>
                                    Code Example:
                                    <LineBreak/>
                                    switch (state) {
                                    <LineBreak/>
                                    case 0:
                                    <LineBreak/>
                                    scr_player_normal();
                                    <LineBreak/>
                                    break;
                                    <LineBreak/>
                                    case UnknownEnum.Value_1:
                                    <LineBreak/>
                                    state_player_idle();
                                    <LineBreak/>
                                    break;
                                    <LineBreak/>
                                    }
                                    <LineBreak/>
                                    <LineBreak/>
                                    Outcome: states.normal  |   states.idle
                                </TextBlock>
                            </ToolTip>
                        </TextBlock.ToolTip>
                    </TextBlock>
                </Grid>

            </StackPanel>

            <!-- Buttons for Add and Save -->
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0">
                <Button Width="119" Margin="10" Click="AddENUMRowButton_Click" ToolTip="Add another code entry to check for enums">Add Code to Search</Button>
            </StackPanel>
            <StackPanel Orientation="Horizontal" Width="340">
                <Button Width="150" Margin="10" Click="CSTMSaveInputsButton" ToolTip="Make Pizza Tower JSON Files with custom settings by user">Save Inputs</Button>
                <Button Width="150" Margin="10" Click="CSTMUseDefaultsButton" ToolTip="Make Pizza Tower JSON Files with default settings">Use Default</Button>
            </StackPanel>

        </StackPanel>
    </ScrollViewer>
</Window>



